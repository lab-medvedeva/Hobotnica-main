library("doParallel")
generate_random_signatures <- function(dataset, signature_length=100, n_signatures=0,n_cores=0) {
if (n_signatures == 0) {
n_signatures = dim(dataset)[1]*10
}
if (n_cores == 0){
n_cores <- detectCores() - 2
}
cl <- parallel::makeForkCluster(n_cores)
doParallel::registerDoParallel(cl)
random_gene_signatures <- foreach (i=1:n_signatures) %dopar% {
sample(rownames(xxx), signature_length)
}
parallel::stopCluster(cl)
return(random_gene_signatures)
}
data("iris")
random_gene_signatures(iris)
generate_random_signatures(iris)
library("doParallel")
generate_random_signatures <- function(dataset, signature_length=100, n_signatures=0,n_cores=0) {
if (n_signatures == 0) {
n_signatures = dim(dataset)[1]*10
}
if (n_cores == 0){
n_cores <- detectCores() - 2
}
cl <- parallel::makeForkCluster(n_cores)
doParallel::registerDoParallel(cl)
random_gene_signatures <- foreach (i=1:n_signatures) %dopar% {
sample(rownames(dataset), signature_length)
}
parallel::stopCluster(cl)
return(random_gene_signatures)
}
generate_random_signatures(iris)
generate_random_signatures(iris)
generate_random_signatures <- function(dataset, signature_length=100, n_signatures=0,n_cores=0) {
if (length(dim(dataset)) != 2) {
stop("The dataset dim length must be equal 2")
}
if (n_signatures == 0) {
n_signatures = dim(dataset)[1]*10
}
if (n_cores == 0){
n_cores <- detectCores() - 2
}
cl <- parallel::makeForkCluster(n_cores)
doParallel::registerDoParallel(cl)
random_gene_signatures <- foreach (i=1:n_signatures) %dopar% {
sample(rownames(dataset), signature_length)
}
parallel::stopCluster(cl)
return(random_gene_signatures)
}
generate_random_signatures(iris)
library(Hobotnica)
Hobot_stat()
library("amap")
library(Hobotnica)
data("iris")
library(amap)
iris[, -5]
iris[, -4]
iris[, -5]
iris[, 5]
distMatrix = Dist(t(iris[, -5]))
annotation = iris[, 5]
distMatrix
distMatrix = Dist(iris[, -5])
annotation = iris[, 5]
distMatrix
Hobot_stat(distMatrix, annotation)
